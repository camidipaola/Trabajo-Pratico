module Vessel ( Vessel, newV, freeCellsV, loadV, unloadV, netV )
 where

import Container
import Stack
import Route

data Vessel = Ves [ Stack ] Route deriving (Eq, Show)

newV :: Int -> Int -> Route -> Vessel  -- construye un barco según una cnatida de bahias, la altura de las mismas y una ruta
newV stacks height route | stacks <= 0 || height <= 0 = error "no puede haber un barco sin bahias"
                         | otherwise = Ves [newS height |y <- [1..stacks]]route     

freeCellsV :: Vessel -> Int            -- responde la celdas disponibles en el barco
freeCellsV (Ves stacks _) = sum (map freeCellsS stacks)

loadV :: Vessel -> Container -> Vessel -- carga un contenedor en el barco
loadV (Ves stacks route) container 
    | update stacks container route == stacks = error "se acabo el espacio"
    | otherwise = Ves (update stacks container route) route

update :: [Stack] -> Container -> Route -> [Stack]
update [] _ _ = []  -- si la lista de stacks está vacia, devuelve una lista vacía
update (contenedor:contenedores) container route
    | holdsS contenedor container route = stackS contenedor container : contenedores
    | otherwise = contenedor : update contenedores container route 


unloadV :: Vessel -> String -> Vessel  -- responde un barco al que se le han descargado los contenedores que podían descargarse en la ciudad
unloadV (Ves contenedor route) ciudad = Ves (map (\stack -> popS stack ciudad) contenedor) route

netV :: Vessel -> Int                  -- responde el peso neto en toneladas de los contenedores en el barco
netV (Ves contenedor _) = sum (map netS contenedor)
